// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FlashcardStatus {
  EXCELLENT    
  GOOD         
  MEDIUM       
  POOR         
  BAD          
  NOTREAD      
}

model User {
  id Int @id @default(autoincrement())

  firstName String
  lastName String
  email String @unique
  password String 
  type Role @default(USER)

  dateUpdate DateTime @default(now())
  dateCreated DateTime @default(now())
  
  collection Collection[]
  flashcard Flashcard[]
  folder Folder[]
  userAchievements UserAchievements[]

  friendsList FriendsList?
  }

model Collection {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  folderId Int?
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  nameCollection String
  resumeCollection String

  collectionFlashcard CollectionFlashcard[]

  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}

model CollectionFlashcard {
  @@id([collectionId, flashcardId])

  collectionId Int
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  flashcardId Int
  flashcard Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  status FlashcardStatus @default(NOTREAD)
  dateRevision DateTime?

  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}

model Flashcard  {
  id Int @id @default(autoincrement())
  
  userId Int
  user User @relation(fields: [userId], references: [id])

  collectionFlashcard CollectionFlashcard[]

  question String
  answer String
  isGerenatedAI Boolean @default(false)
  
  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}

model Folder {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  nameFolder String

  collection Collection[]

  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}

model UserAchievements {
  @@id([userId, achievementsId])

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  achievementsId Int
  achievements Achievements @relation(fields: [achievementsId], references: [id], onDelete: Cascade)

  status FlashcardStatus @default(NOTREAD)
  dateRevision DateTime

  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}

model Achievements {
  id Int @id @default(autoincrement())

  nameAchievements String
  description String

  userAchievements UserAchievements[]

  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}

model FriendsList {
  @@id([userId])

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  friendsList Int[] //lista de ids

  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
}