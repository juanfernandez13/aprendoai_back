// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
enum CardStatus {
  GOOD
  MEDIUM
  BAD
  NOTREAD
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  number String @unique
  password String 
 
  type Role @default(USER)
  dateUpdate DateTime @default(now())
  dateCreated DateTime @default(now())

  folder Folder[]
  progress Progress[]
  createdCollections Collection[]
  achievements Achievements[]
  associatedCollection UserCollection[]
}

// Collection dados
model Collection {
  id Int @id @default(autoincrement())
  creatorId Int 
  creator User @relation(fields: [creatorId], references: [id])
  
  folder Folder[]
  progress Progress[]
  
  dateCreated DateTime @default(now())
  dateUpdate DateTime @default(now())
  
  cards Card[]
  associatedCollection UserCollection[]
  
  nameCollection String

}

model UserCollection {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])

  collectionId Int
  collection Collection @relation(fields: [collectionId], references: [id])

  dateCreated DateTime @default(now())

  @@unique([userId, collectionId])
}

model Card {
  id Int @id @default(autoincrement())
  collectionId Int
  collection Collection @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  
  dateUpdate DateTime @default(now())
  dateCreated DateTime @default(now())
  
  question String
  answer String
  isGeneratedAI Boolean @default(false)
  progress ProgressCard[]
}

//Um usuário pode ter vários progressos
model Progress {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  collectionId Int 
  collection Collection @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  
  dateUpdate DateTime @default(now())
  dateCreated DateTime @default(now())
  
  progressCards ProgressCard[] 
  dateToRevision DateTime

  @@unique([userId, collectionId])
}

model ProgressCard {
  progressId Int
  progress Progress @relation(fields: [progressId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  cardId Int
  card Card @relation(fields: [cardId], references: [id],  onUpdate: Cascade, onDelete: Cascade)

  category CardStatus @default(NOTREAD)
  
  dateCreated DateTime @default(now())
  @@id([progressId, cardId])
  
}

// Folder dados
model Folder {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  collection Collection[]
  
  dateUpdate DateTime @default(now())
  dateCreated DateTime @default(now())
  
  nameFolders String
}

model Achievements {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])

  dateUpdate DateTime @default(now())
  dateCreated DateTime @default(now())

  achievementName String @unique
  achievementCategory String @unique
}