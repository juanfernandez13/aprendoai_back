generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String             @unique
  password         String
  type             Role               @default(USER)
  dateUpdate       DateTime           @default(now())
  dateCreated      DateTime           @default(now())
  collection       Collection[]
  flashcard        Flashcard[]
  folder           Folder[]
  friendsList      FriendsList?
  summaries        Summary[]
  userAchievements UserAchievements[]
}

model Collection {
  id                  Int                   @id @default(autoincrement())
  userId              Int
  nameCollection      String
  resumeCollection    String
  dateCreated         DateTime              @default(now())
  dateUpdate          DateTime              @default(now())
  resumeIsGeneratedAI Boolean               @default(false)
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionFlashcard CollectionFlashcard[]
  collectionSummary   CollectionSummary[]
  folder              Folder[]              @relation("CollectionFolders")
}

model CollectionFlashcard {
  collectionId Int
  flashcardId  Int
  status       FlashcardStatus @default(NOTREAD)
  dateRevision DateTime?
  dateCreated  DateTime        @default(now())
  dateUpdate   DateTime        @default(now())
  collection   Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  flashcard    Flashcard       @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@id([collectionId, flashcardId])
}

model CollectionSummary {
  @@id([collectionId, summaryId])

  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  summaryId Int
  summary   Summary @relation(fields: [summaryId], references: [id], onDelete: Cascade)

  dateCreated DateTime @default(now())
  dateUpdate  DateTime @updatedAt
}

model Summary {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  collectionSummary CollectionSummary[]

  content String
  isGeneratedAI Boolean @default(false)

  dateCreated DateTime @default(now())
  dateUpdate  DateTime @updatedAt
}


model Flashcard {
  id                  Int                   @id @default(autoincrement())
  question            String
  answer              String
  dateCreated         DateTime              @default(now())
  dateUpdate          DateTime              @default(now())
  userId              Int
  isGerenatedAI       Boolean               @default(false)
  collectionFlashcard CollectionFlashcard[]
  user                User                  @relation(fields: [userId], references: [id])
}

model Folder {
  id          Int          @id @default(autoincrement())
  userId      Int
  nameFolder  String
  dateCreated DateTime     @default(now())
  dateUpdate  DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection  Collection[] @relation("CollectionFolders")
}

model UserAchievements {
  userId         Int
  achievementsId Int
  status         FlashcardStatus @default(NOTREAD)
  dateRevision   DateTime
  dateCreated    DateTime        @default(now())
  dateUpdate     DateTime        @default(now())
  achievements   Achievements    @relation(fields: [achievementsId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, achievementsId])
}

model Achievements {
  id               Int                @id @default(autoincrement())
  nameAchievements String
  description      String
  dateCreated      DateTime           @default(now())
  dateUpdate       DateTime           @default(now())
  userAchievements UserAchievements[]
}

model FriendsList {
  userId       Int      @id
  friendsList  Int[]
  dateCreated  DateTime @default(now())
  dateUpdate   DateTime @default(now())
  solicitaions Int[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum FlashcardStatus {
  EXCELLENT
  GOOD
  MEDIUM
  POOR
  BAD
  NOTREAD
}
